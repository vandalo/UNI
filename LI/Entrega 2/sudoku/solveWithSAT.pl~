:-include(sud22).
:-dynamic(varNumber/3).
symbolicOutput(0). % set to 1 to see symbolic output only; 0 otherwise.

writeClauses:- autocomplete, atlesOneNumCasi, atmostOneNumPerRow, atmostOneNumPerColum, atmostOneNum3x3.
%

%Minimo_Un_Numero_Casilla
atlesOneNumCasi:- between(1,9,I), between(1,9,J), findall( x-I-J-K, between(1,9,K), C), writeClause(C), fail.
atlesOneNumCasi.		  

%Maxim_Uno_Por_Fila
atmostOneNumPerRow:- between(1,9,I), between(1,9,K), between(1,9,J1), between(1,9,J2), J1 < J2,
	writeClause( [\+x-I-J1-K, \+x-I-J2-K] ), fail.
atmostOneNumPerRow.

%Maxim_Uno_Por_Columna
atmostOneNumPerColum:- between(1,9,J), between(1,9,K), between(1,9,I1), between(1,9,I2), I1 < I2,
	writeClause( [\+x-I1-J-K, \+x-I2-J-K] ), fail.
atmostOneNumPerColum.

cuadro:- between(1,3,R), between(1,3,C), A is R*3-2, A2 is R*3,
	B is C*3-2, B2 is C*3, between(A,A2, I), between(B, B2, J), between(1,9,K),
	between(A,A2, I2), between(B,B2, J2), I < I2,
	writeClause( [\+x-I-J-K, \+x-I2-J2-K]), fail.
cuadro.

%Maxim_Uno_Por_Quadrat
atmostOneNum3x3:- between(1,3,I1), between(1,3,I2), between(1,3,J1), between(1,3,J2),  between(1,9,K), I1<I2,
		  writeClause( [\+x-I1-J1-K, \+x-I2-J2-K] ), fail.	  
atmostOneNum3x3:- between(4,6,I1), between(4,6,I2), between(1,3,J1), between(1,3,J2),  between(1,9,K), I1<I2,
		  writeClause( [\+x-I1-J1-K, \+x-I2-J2-K] ), fail.	  
atmostOneNum3x3:- between(7,9,I1), between(7,9,I2), between(1,3,J1), between(1,3,J2),  between(1,9,K), I1<I2,
		  writeClause( [\+x-I1-J1-K, \+x-I2-J2-K] ), fail.	
atmostOneNum3x3:- between(4,6,I1), between(4,6,I2), between(4,6,J1), between(4,6,J2),  between(1,9,K), I1<I2,
		  writeClause( [\+x-I1-J1-K, \+x-I2-J2-K] ), fail.	  
atmostOneNum3x3:- between(7,9,I1), between(7,9,I2), between(7,9,J1), between(7,9,J2),  between(1,9,K), I1<I2,
		  writeClause( [\+x-I1-J1-K, \+x-I2-J2-K] ), fail.	  
atmostOneNum3x3.

%Set_Posicions_Inicials
autocomplete:- filled(I,J,K),
		writeClause([x-I-J-K]), fail.
autocomplete.

displaySol([]).
displaySol(L):-
  between(1, 3, B), nl, XX is 3*B -2, XX2 is 3*B,
  between(XX, XX2, I), nl,
  between(1, 3, A), write(' '),
  X is 3 * A -2, X2 is 3 * A,
  
  between(X, X2, J) , between(1, 9, K),
  var2num(x-I-J-K, N),
  member(N, L), write(K), write(' '), fail.
displaySol(_):- nl.




% ========== No need to change the following: =====================================

main:- symbolicOutput(1), !, writeClauses, halt. % escribir bonito, no ejecutar
main:-  assert(numClauses(0)), assert(numVars(0)),
	tell(clauses), writeClauses, told,
	tell(header),  writeHeader,  told,
	unix('cat header clauses > infile.cnf'),
	unix('picosat -v -o model infile.cnf'),
	unix('cat model'),
	see(model), readModel(M), seen, displaySol(M),
	halt.

var2num(T,N):- hash_term(T,Key), varNumber(Key,T,N),!.
var2num(T,N):- retract(numVars(N0)), N is N0+1, assert(numVars(N)), hash_term(T,Key),
	assert(varNumber(Key,T,N)), assert( num2var(N,T) ), !.

writeHeader:- numVars(N),numClauses(C),write('p cnf '),write(N), write(' '),write(C),nl.

countClause:-  retract(numClauses(N)), N1 is N+1, assert(numClauses(N1)),!.
writeClause([]):- symbolicOutput(1),!, nl.
writeClause([]):- countClause, write(0), nl.
writeClause([Lit|C]):- w(Lit), writeClause(C),!.
w( Lit ):- symbolicOutput(1), write(Lit), write(' '),!.
w(\+Var):- var2num(Var,N), write(-), write(N), write(' '),!.
w(  Var):- var2num(Var,N),           write(N), write(' '),!.
unix(Comando):-shell(Comando),!.
unix(_).

readModel(L):- get_code(Char), readWord(Char,W), readModel(L1), addIfPositiveInt(W,L1,L),!.
readModel([]).

addIfPositiveInt(W,L,[N|L]):- W = [C|_], between(48,57,C), number_codes(N,W), N>0, !.
addIfPositiveInt(_,L,L).

readWord(99,W):- repeat, get_code(Ch), member(Ch,[-1,10]), !, get_code(Ch1), readWord(Ch1,W),!.
readWord(-1,_):-!, fail. %end of file
readWord(C,[]):- member(C,[10,32]), !. % newline or white space marks end of word
readWord(Char,[Char|W]):- get_code(Char1), readWord(Char1,W), !.
%========================================================================================
